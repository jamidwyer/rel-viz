{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/var/www/html/rel-viz/pages/index.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport Link from 'next/link';\nimport { ForceGraph, ForceGraphNode, ForceGraphLink } from 'react-vis-force';\nimport fetch from 'isomorphic-unfetch'; //import Tree from 'react-d3-tree';\n//const Tree = require('react-d3-tree').Tree;\n\nvar myTreeData = [{\n  name: 'Top Level',\n  attributes: {\n    keyA: 'val A',\n    keyB: 'val B',\n    keyC: 'val C'\n  },\n  children: [{\n    name: 'Level 2: A',\n    attributes: {\n      keyA: 'val A',\n      keyB: 'val B',\n      keyC: 'val C'\n    }\n  }, {\n    name: 'Level 2: B'\n  }]\n}];\n\nvar PersonLink = function PersonLink(props) {\n  return __jsx(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, __jsx(Link, {\n    href: \"/person/[name]\",\n    as: \"/person/\".concat(props.name),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, __jsx(\"a\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, props.name)));\n};\n\nvar Tree = ' ';\n\nvar Index =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(Index, _React$PureComponent);\n\n  function Index() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Index);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Index)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      redender: false\n    });\n\n    return _this;\n  }\n\n  _createClass(Index, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var res;\n      return _regeneratorRuntime.async(function componentDidMount$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(import(\"react-d3-tree\"));\n\n            case 2:\n              res = _context.sent;\n              Tree = res.Tree;\n              this.setState({\n                redender: true,\n                window: window\n              });\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, __jsx(ForceGraph, {\n        simulationOptions: {\n          height: 300,\n          width: 300\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, props.shows.map(function (person) {\n        return __jsx(ForceGraphNode, {\n          node: {\n            id: person.id,\n            name: person.name\n          },\n          fill: \"red\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 56\n          },\n          __self: this\n        });\n      })), __jsx(ForceGraphLink, {\n        link: {\n          source: 'first-node',\n          target: 'second-node'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }), __jsx(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, __jsx(PersonLink, {\n        name: \"Lev Parnas\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }), __jsx(PersonLink, {\n        name: \"Donald Trump\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }), __jsx(PersonLink, {\n        name: \"Jared Kushner\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      })), __jsx(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, props.shows.map(function (person) {\n        return __jsx(\"li\", {\n          key: person.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 67\n          },\n          __self: this\n        }, __jsx(Link, {\n          href: \"/person/[name]\",\n          as: \"/person/\".concat(person.name),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 68\n          },\n          __self: this\n        }, __jsx(\"a\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 69\n          },\n          __self: this\n        }, person.name)));\n      })), __jsx(\"div\", {\n        style: {\n          height: 1000,\n          width: 1000\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, this.state.redender && __jsx(Tree, {\n        data: myTreeData,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return Index;\n}(React.PureComponent); // const Index = props => {\n//   const Tree = require('react-d3-tree').Tree;\n//   return (\n//     <div>\n//       <ForceGraph simulationOptions={{ height: 300, width: 300 }}>\n//         {props.shows.map(person => (\n//           <ForceGraphNode node={{ id: person.id, name: person.name }} fill=\"red\" />\n//         ))}\n//       </ForceGraph>\n//       <ForceGraphLink link={{ source: 'first-node', target: 'second-node' }} />\n//       <ul>\n//         <PersonLink name=\"Lev Parnas\" />\n//         <PersonLink name=\"Donald Trump\" />\n//         <PersonLink name=\"Jared Kushner\" />\n//       </ul>\n//       <ul>\n//       {props.shows.map(person => (\n//         <li key={person.id}>\n//           <Link href=\"/person/[name]\" as={`/person/${person.name}`}>\n//             <a>{person.name}</a>\n//           </Link>\n//         </li>\n//       ))}\n//     </ul>\n//     <div id=\"treeWrapper\" style={{width: '50em', height: '20em'}}>\n//     <Tree data={myTreeData} onClick={this.onClick} />\n// </div>    </div>\n// )};\n\n\nIndex.getInitialProps = function _callee() {\n  var res, data, d3Tree;\n  return _regeneratorRuntime.async(function _callee$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(fetch('https://api.tvmaze.com/search/shows?q=batman'));\n\n        case 2:\n          res = _context2.sent;\n          _context2.next = 5;\n          return _regeneratorRuntime.awrap(res.json());\n\n        case 5:\n          data = _context2.sent;\n          _context2.next = 8;\n          return _regeneratorRuntime.awrap(import(\"react-d3-tree\"));\n\n        case 8:\n          d3Tree = _context2.sent;\n          Tree = d3Tree.Tree;\n          console.log(\"Show data fetched. Count: \".concat(data.length));\n          return _context2.abrupt(\"return\", {\n            props: [],\n            shows: data.map(function (entry) {\n              return entry.show;\n            }),\n            renderTree: true\n          });\n\n        case 12:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  });\n};\n\nexport default Index;","map":{"version":3,"sources":["/var/www/html/rel-viz/pages/index.js"],"names":["React","Link","ForceGraph","ForceGraphNode","ForceGraphLink","fetch","myTreeData","name","attributes","keyA","keyB","keyC","children","PersonLink","props","Tree","Index","redender","res","setState","window","height","width","shows","map","person","id","source","target","state","PureComponent","getInitialProps","json","data","d3Tree","console","log","length","entry","show","renderTree"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Link from 'next/link';\nimport {ForceGraph, ForceGraphNode, ForceGraphLink} from 'react-vis-force';\nimport fetch from 'isomorphic-unfetch';\n//import Tree from 'react-d3-tree';\n//const Tree = require('react-d3-tree').Tree;\n\nconst myTreeData = [\n  {\n    name: 'Top Level',\n    attributes: {\n      keyA: 'val A',\n      keyB: 'val B',\n      keyC: 'val C',\n    },\n    children: [\n      {\n        name: 'Level 2: A',\n        attributes: {\n          keyA: 'val A',\n          keyB: 'val B',\n          keyC: 'val C',\n        },\n      },\n      {\n        name: 'Level 2: B',\n      },\n    ],\n  },\n];\n\nconst PersonLink = props => (\n  <li>\n    <Link href=\"/person/[name]\" as={`/person/${props.name}`}>\n      <a>{props.name}</a>\n    </Link>\n  </li>\n);\n\n\nlet Tree = ' '\nclass Index extends React.PureComponent {\n   state = {\n   \tredender: false\n   };\n   async componentDidMount() {\n   \tlet res = await import(\"react-d3-tree\");\n   \tTree = res.Tree;\n   \tthis.setState({ redender: true, window });\n   }\n   render() {\n   \treturn (\n      <div>\n      <ForceGraph simulationOptions={{ height: 300, width: 300 }}>\n        {props.shows.map(person => (\n          <ForceGraphNode node={{ id: person.id, name: person.name }} fill=\"red\" />\n        ))}\n      </ForceGraph>\n      <ForceGraphLink link={{ source: 'first-node', target: 'second-node' }} />\n      <ul>\n        <PersonLink name=\"Lev Parnas\" />\n        <PersonLink name=\"Donald Trump\" />\n        <PersonLink name=\"Jared Kushner\" />\n      </ul>\n      <ul>\n      {props.shows.map(person => (\n        <li key={person.id}>\n          <Link href=\"/person/[name]\" as={`/person/${person.name}`}>\n            <a>{person.name}</a>\n          </Link>\n        </li>\n      ))}\n    </ul>\n     <div style={{ height: 1000, width: 1000 }}>{this.state.redender && <Tree data={myTreeData} />}</div>\n     </div>\n     );\n   }\n}\n\n// const Index = props => {\n//   const Tree = require('react-d3-tree').Tree;\n//   return (\n//     <div>\n//       <ForceGraph simulationOptions={{ height: 300, width: 300 }}>\n//         {props.shows.map(person => (\n//           <ForceGraphNode node={{ id: person.id, name: person.name }} fill=\"red\" />\n//         ))}\n//       </ForceGraph>\n//       <ForceGraphLink link={{ source: 'first-node', target: 'second-node' }} />\n//       <ul>\n//         <PersonLink name=\"Lev Parnas\" />\n//         <PersonLink name=\"Donald Trump\" />\n//         <PersonLink name=\"Jared Kushner\" />\n//       </ul>\n//       <ul>\n//       {props.shows.map(person => (\n//         <li key={person.id}>\n//           <Link href=\"/person/[name]\" as={`/person/${person.name}`}>\n//             <a>{person.name}</a>\n//           </Link>\n//         </li>\n//       ))}\n//     </ul>\n//     <div id=\"treeWrapper\" style={{width: '50em', height: '20em'}}>\n \n//     <Tree data={myTreeData} onClick={this.onClick} />\n  \n// </div>    </div>\n// )};\n  \nIndex.getInitialProps = async function() {\n  const res = await fetch('https://api.tvmaze.com/search/shows?q=batman');\n  const data = await res.json();\n\n  let d3Tree = await import(\"react-d3-tree\");\n  Tree = d3Tree.Tree;\n\n  console.log(`Show data fetched. Count: ${data.length}`);\n\n  return {\n    props: [],\n    shows: data.map(entry => entry.show),\n    renderTree: true,\n  };\n};\n\nexport default Index;"]},"metadata":{},"sourceType":"module"}