{"ast":null,"code":"var _jsxFileName = \"/var/www/html/rel-viz/pages/index.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport Link from 'next/link';\nimport { ForceGraph, ForceGraphNode, ForceGraphLink } from 'react-vis-force';\nimport fetch from 'isomorphic-unfetch';\nconst myTreeData = [{\n  name: 'Top Level',\n  attributes: {\n    keyA: 'val A',\n    keyB: 'val B',\n    keyC: 'val C'\n  },\n  children: [{\n    name: 'Level 2: A',\n    attributes: {\n      keyA: 'val A',\n      keyB: 'val B',\n      keyC: 'val C'\n    }\n  }, {\n    name: 'Level 2: B'\n  }]\n}];\n\nconst PersonLink = props => __jsx(\"li\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 31\n  },\n  __self: this\n}, __jsx(Link, {\n  href: \"/person/[name]\",\n  as: `/person/${props.name}`,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 32\n  },\n  __self: this\n}, __jsx(\"a\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 33\n  },\n  __self: this\n}, props.name)));\n\nconst Index = props => __jsx(\"div\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 39\n  },\n  __self: this\n}, __jsx(ForceGraph, {\n  simulationOptions: {\n    height: 300,\n    width: 300\n  },\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 40\n  },\n  __self: this\n}, props.shows.map(person => __jsx(ForceGraphNode, {\n  node: {\n    id: person.id,\n    name: person.name\n  },\n  fill: \"red\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 42\n  },\n  __self: this\n}))), __jsx(ForceGraphLink, {\n  link: {\n    source: 'first-node',\n    target: 'second-node'\n  },\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 45\n  },\n  __self: this\n}), __jsx(\"ul\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 46\n  },\n  __self: this\n}, __jsx(PersonLink, {\n  name: \"Lev Parnas\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 47\n  },\n  __self: this\n}), __jsx(PersonLink, {\n  name: \"Donald Trump\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 48\n  },\n  __self: this\n}), __jsx(PersonLink, {\n  name: \"Jared Kushner\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 49\n  },\n  __self: this\n})), __jsx(\"ul\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 51\n  },\n  __self: this\n}, props.shows.map(person => __jsx(\"li\", {\n  key: person.id,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 53\n  },\n  __self: this\n}, __jsx(Link, {\n  href: \"/person/[name]\",\n  as: `/person/${person.name}`,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 54\n  },\n  __self: this\n}, __jsx(\"a\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 55\n  },\n  __self: this\n}, person.name))))));\n\nIndex.getInitialProps = async function () {\n  const res = await fetch('https://api.tvmaze.com/search/shows?q=batman');\n  const data = await res.json();\n  console.log(`Show data fetched. Count: ${data.length}`);\n  return {\n    props: [],\n    shows: data.map(entry => entry.show),\n    renderTree: true\n  };\n};\n\nexport default Index;","map":{"version":3,"sources":["/var/www/html/rel-viz/pages/index.js"],"names":["React","Link","ForceGraph","ForceGraphNode","ForceGraphLink","fetch","myTreeData","name","attributes","keyA","keyB","keyC","children","PersonLink","props","Index","height","width","shows","map","person","id","source","target","getInitialProps","res","data","json","console","log","length","entry","show","renderTree"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Link from 'next/link';\nimport {ForceGraph, ForceGraphNode, ForceGraphLink} from 'react-vis-force';\nimport fetch from 'isomorphic-unfetch';\n\nconst myTreeData = [\n  {\n    name: 'Top Level',\n    attributes: {\n      keyA: 'val A',\n      keyB: 'val B',\n      keyC: 'val C',\n    },\n    children: [\n      {\n        name: 'Level 2: A',\n        attributes: {\n          keyA: 'val A',\n          keyB: 'val B',\n          keyC: 'val C',\n        },\n      },\n      {\n        name: 'Level 2: B',\n      },\n    ],\n  },\n];\n\nconst PersonLink = props => (\n  <li>\n    <Link href=\"/person/[name]\" as={`/person/${props.name}`}>\n      <a>{props.name}</a>\n    </Link>\n  </li>\n);\n\nconst Index = props => (\n    <div>\n      <ForceGraph simulationOptions={{ height: 300, width: 300 }}>\n        {props.shows.map(person => (\n          <ForceGraphNode node={{ id: person.id, name: person.name }} fill=\"red\" />\n        ))}\n      </ForceGraph>\n      <ForceGraphLink link={{ source: 'first-node', target: 'second-node' }} />\n      <ul>\n        <PersonLink name=\"Lev Parnas\" />\n        <PersonLink name=\"Donald Trump\" />\n        <PersonLink name=\"Jared Kushner\" />\n      </ul>\n      <ul>\n      {props.shows.map(person => (\n        <li key={person.id}>\n          <Link href=\"/person/[name]\" as={`/person/${person.name}`}>\n            <a>{person.name}</a>\n          </Link>\n        </li>\n      ))}\n    </ul>\n</div>\n);\n  \nIndex.getInitialProps = async function() {\n  const res = await fetch('https://api.tvmaze.com/search/shows?q=batman');\n  const data = await res.json();\n\n  console.log(`Show data fetched. Count: ${data.length}`);\n\n  return {\n    props: [],\n    shows: data.map(entry => entry.show),\n    renderTree: true,\n  };\n};\n\nexport default Index;"]},"metadata":{},"sourceType":"module"}