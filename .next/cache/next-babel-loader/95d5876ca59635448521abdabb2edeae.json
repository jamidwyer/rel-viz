{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nvar _jsxFileName = \"/var/www/html/rel-viz/pages/index.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport Link from 'next/link';\nimport { ForceGraph, ForceGraphNode, ForceGraphLink } from 'react-vis-force';\nimport fetch from 'isomorphic-unfetch';\nimport people from '../data/people.json';\nvar myTreeData = [{\n  name: 'Top Level',\n  attributes: {\n    keyA: 'val A',\n    keyB: 'val B',\n    keyC: 'val C'\n  },\n  children: [{\n    name: 'Level 2: A',\n    attributes: {\n      keyA: 'val A',\n      keyB: 'val B',\n      keyC: 'val C'\n    }\n  }, {\n    name: 'Level 2: B'\n  }]\n}];\n\nvar PersonLink = function PersonLink(props) {\n  return __jsx(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, __jsx(Link, {\n    href: \"/person/[name]\",\n    as: \"/person/\".concat(props.name),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, __jsx(\"a\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, props.name)));\n};\n\nvar Index = function Index(props) {\n  console.log(props);\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, __jsx(ForceGraph, {\n    simulationOptions: {\n      height: 300,\n      width: 300\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, props.shows.map(function (person) {\n    return __jsx(ForceGraphNode, {\n      node: {\n        id: person.id,\n        name: person.name\n      },\n      fill: \"red\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    });\n  })), __jsx(ForceGraphLink, {\n    link: {\n      source: 'first-node',\n      target: 'second-node'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }), __jsx(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, __jsx(PersonLink, {\n    name: \"Lev Parnas\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }), __jsx(PersonLink, {\n    name: \"Donald Trump\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }), __jsx(PersonLink, {\n    name: \"Jared Kushner\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  })), __jsx(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, props.shows.map(function (person) {\n    return __jsx(\"li\", {\n      key: person.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, __jsx(Link, {\n      href: \"/person/[name]\",\n      as: \"/person/\".concat(person.name),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, __jsx(\"a\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, person.name)));\n  })));\n};\n\nIndex.getInitialProps = function _callee() {\n  var res, data;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(fetch('https://api.tvmaze.com/search/shows?q=batman'));\n\n        case 2:\n          res = _context.sent;\n          //  const data = await res.json();\n          data = people;\n          console.log(\"Show data fetched. Count: \".concat(data.length));\n          console.log(data.map(function (entry) {\n            return entry.show;\n          }));\n          return _context.abrupt(\"return\", {\n            props: [],\n            shows: data.nodes.map(function (entry) {\n              return entry.show;\n            }),\n            renderTree: true\n          });\n\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nexport default Index;","map":{"version":3,"sources":["/var/www/html/rel-viz/pages/index.js"],"names":["React","Link","ForceGraph","ForceGraphNode","ForceGraphLink","fetch","people","myTreeData","name","attributes","keyA","keyB","keyC","children","PersonLink","props","Index","console","log","height","width","shows","map","person","id","source","target","getInitialProps","res","data","length","entry","show","nodes","renderTree"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Link from 'next/link';\nimport {ForceGraph, ForceGraphNode, ForceGraphLink} from 'react-vis-force';\nimport fetch from 'isomorphic-unfetch';\nimport people from '../data/people.json'\n\nconst myTreeData = [\n  {\n    name: 'Top Level',\n    attributes: {\n      keyA: 'val A',\n      keyB: 'val B',\n      keyC: 'val C',\n    },\n    children: [\n      {\n        name: 'Level 2: A',\n        attributes: {\n          keyA: 'val A',\n          keyB: 'val B',\n          keyC: 'val C',\n        },\n      },\n      {\n        name: 'Level 2: B',\n      },\n    ],\n  },\n];\n\nconst PersonLink = props => (\n  <li>\n    <Link href=\"/person/[name]\" as={`/person/${props.name}`}>\n      <a>{props.name}</a>\n    </Link>\n  </li>\n);\n\nconst Index = props => {\nconsole.log(props);\n  return (\n    <div>\n      <ForceGraph simulationOptions={{ height: 300, width: 300 }}>\n        {props.shows.map(person => (\n          <ForceGraphNode node={{ id: person.id, name: person.name }} fill=\"red\" />\n        ))}\n      </ForceGraph>\n      <ForceGraphLink link={{ source: 'first-node', target: 'second-node' }} />\n      <ul>\n        <PersonLink name=\"Lev Parnas\" />\n        <PersonLink name=\"Donald Trump\" />\n        <PersonLink name=\"Jared Kushner\" />\n      </ul>\n      <ul>\n      {props.shows.map(person => (\n        <li key={person.id}>\n          <Link href=\"/person/[name]\" as={`/person/${person.name}`}>\n            <a>{person.name}</a>\n          </Link>\n        </li>\n      ))}\n    </ul>\n</div>\n)};\n  \nIndex.getInitialProps = async function() {\n  const res = await fetch('https://api.tvmaze.com/search/shows?q=batman');\n//  const data = await res.json();\nconst data = people;\n  console.log(`Show data fetched. Count: ${data.length}`);\n\n  console.log(data.map(entry => entry.show));\n\n  return {\n    props: [],\n    shows: data.nodes.map(entry => entry.show),\n    renderTree: true,\n  };\n};\n\nexport default Index;"]},"metadata":{},"sourceType":"module"}