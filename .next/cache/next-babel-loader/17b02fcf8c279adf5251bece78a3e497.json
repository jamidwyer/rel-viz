{"ast":null,"code":"var _jsxFileName = \"/var/www/html/rel-viz/pages/index.js\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport Link from 'next/link';\nimport { ForceGraph, ForceGraphNode, ForceGraphLink } from 'react-vis-force';\nimport fetch from 'isomorphic-unfetch'; //import Tree from 'react-d3-tree';\n//const Tree = require('react-d3-tree').Tree;\n\nconst myTreeData = [{\n  name: 'Top Level',\n  attributes: {\n    keyA: 'val A',\n    keyB: 'val B',\n    keyC: 'val C'\n  },\n  children: [{\n    name: 'Level 2: A',\n    attributes: {\n      keyA: 'val A',\n      keyB: 'val B',\n      keyC: 'val C'\n    }\n  }, {\n    name: 'Level 2: B'\n  }]\n}];\n\nconst PersonLink = props => __jsx(\"li\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 33\n  },\n  __self: this\n}, __jsx(Link, {\n  href: \"/person/[name]\",\n  as: `/person/${props.name}`,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 34\n  },\n  __self: this\n}, __jsx(\"a\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 35\n  },\n  __self: this\n}, props.name)));\n\nlet Tree = ' ';\n\nclass Index extends React.PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      redender: false\n    });\n  }\n\n  async componentDidMount() {\n    let res = await import(\"react-d3-tree\");\n    Tree = res.Tree;\n    this.setState({\n      redender: true,\n      window\n    });\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, __jsx(ForceGraph, {\n      simulationOptions: {\n        height: 300,\n        width: 300\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, props.shows.map(person => __jsx(ForceGraphNode, {\n      node: {\n        id: person.id,\n        name: person.name\n      },\n      fill: \"red\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }))), __jsx(ForceGraphLink, {\n      link: {\n        source: 'first-node',\n        target: 'second-node'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }), __jsx(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, __jsx(PersonLink, {\n      name: \"Lev Parnas\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }), __jsx(PersonLink, {\n      name: \"Donald Trump\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }), __jsx(PersonLink, {\n      name: \"Jared Kushner\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    })), __jsx(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, props.shows.map(person => __jsx(\"li\", {\n      key: person.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, __jsx(Link, {\n      href: \"/person/[name]\",\n      as: `/person/${person.name}`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, __jsx(\"a\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, person.name))))), __jsx(\"div\", {\n      style: {\n        height: 1000,\n        width: 1000\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, this.state.redender && __jsx(Tree, {\n      data: myTreeData,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    })));\n  }\n\n} // const Index = props => {\n//   const Tree = require('react-d3-tree').Tree;\n//   return (\n//     <div>\n//       <ForceGraph simulationOptions={{ height: 300, width: 300 }}>\n//         {props.shows.map(person => (\n//           <ForceGraphNode node={{ id: person.id, name: person.name }} fill=\"red\" />\n//         ))}\n//       </ForceGraph>\n//       <ForceGraphLink link={{ source: 'first-node', target: 'second-node' }} />\n//       <ul>\n//         <PersonLink name=\"Lev Parnas\" />\n//         <PersonLink name=\"Donald Trump\" />\n//         <PersonLink name=\"Jared Kushner\" />\n//       </ul>\n//       <ul>\n//       {props.shows.map(person => (\n//         <li key={person.id}>\n//           <Link href=\"/person/[name]\" as={`/person/${person.name}`}>\n//             <a>{person.name}</a>\n//           </Link>\n//         </li>\n//       ))}\n//     </ul>\n//     <div id=\"treeWrapper\" style={{width: '50em', height: '20em'}}>\n//     <Tree data={myTreeData} onClick={this.onClick} />\n// </div>    </div>\n// )};\n\n\nIndex.getInitialProps = async function () {\n  const res = await fetch('https://api.tvmaze.com/search/shows?q=batman');\n  const data = await res.json();\n  let d3Tree = await import(\"react-d3-tree\");\n  Tree = d3Tree.Tree;\n  console.log(`Show data fetched. Count: ${data.length}`);\n  return {\n    props: [],\n    shows: data.map(entry => entry.show),\n    renderTree: true\n  };\n};\n\nexport default Index;","map":{"version":3,"sources":["/var/www/html/rel-viz/pages/index.js"],"names":["React","Link","ForceGraph","ForceGraphNode","ForceGraphLink","fetch","myTreeData","name","attributes","keyA","keyB","keyC","children","PersonLink","props","Tree","Index","PureComponent","redender","componentDidMount","res","setState","window","render","height","width","shows","map","person","id","source","target","state","getInitialProps","data","json","d3Tree","console","log","length","entry","show","renderTree"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAAQC,UAAR,EAAoBC,cAApB,EAAoCC,cAApC,QAAyD,iBAAzD;AACA,OAAOC,KAAP,MAAkB,oBAAlB,C,CACA;AACA;;AAEA,MAAMC,UAAU,GAAG,CACjB;AACEC,EAAAA,IAAI,EAAE,WADR;AAEEC,EAAAA,UAAU,EAAE;AACVC,IAAAA,IAAI,EAAE,OADI;AAEVC,IAAAA,IAAI,EAAE,OAFI;AAGVC,IAAAA,IAAI,EAAE;AAHI,GAFd;AAOEC,EAAAA,QAAQ,EAAE,CACR;AACEL,IAAAA,IAAI,EAAE,YADR;AAEEC,IAAAA,UAAU,EAAE;AACVC,MAAAA,IAAI,EAAE,OADI;AAEVC,MAAAA,IAAI,EAAE,OAFI;AAGVC,MAAAA,IAAI,EAAE;AAHI;AAFd,GADQ,EASR;AACEJ,IAAAA,IAAI,EAAE;AADR,GATQ;AAPZ,CADiB,CAAnB;;AAwBA,MAAMM,UAAU,GAAGC,KAAK,IACtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE,MAAC,IAAD;AAAM,EAAA,IAAI,EAAC,gBAAX;AAA4B,EAAA,EAAE,EAAG,WAAUA,KAAK,CAACP,IAAK,EAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAIO,KAAK,CAACP,IAAV,CADF,CADF,CADF;;AASA,IAAIQ,IAAI,GAAG,GAAX;;AACA,MAAMC,KAAN,SAAoBhB,KAAK,CAACiB,aAA1B,CAAwC;AAAA;AAAA;;AAAA,mCAC7B;AACPC,MAAAA,QAAQ,EAAE;AADH,KAD6B;AAAA;;AAIrC,QAAMC,iBAAN,GAA0B;AACzB,QAAIC,GAAG,GAAG,MAAM,OAAO,eAAP,CAAhB;AACAL,IAAAA,IAAI,GAAGK,GAAG,CAACL,IAAX;AACA,SAAKM,QAAL,CAAc;AAAEH,MAAAA,QAAQ,EAAE,IAAZ;AAAkBI,MAAAA;AAAlB,KAAd;AACA;;AACDC,EAAAA,MAAM,GAAG;AACR,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA,MAAC,UAAD;AAAY,MAAA,iBAAiB,EAAE;AAAEC,QAAAA,MAAM,EAAE,GAAV;AAAeC,QAAAA,KAAK,EAAE;AAAtB,OAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGX,KAAK,CAACY,KAAN,CAAYC,GAAZ,CAAgBC,MAAM,IACrB,MAAC,cAAD;AAAgB,MAAA,IAAI,EAAE;AAAEC,QAAAA,EAAE,EAAED,MAAM,CAACC,EAAb;AAAiBtB,QAAAA,IAAI,EAAEqB,MAAM,CAACrB;AAA9B,OAAtB;AAA4D,MAAA,IAAI,EAAC,KAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,CADH,CADA,EAMA,MAAC,cAAD;AAAgB,MAAA,IAAI,EAAE;AAAEuB,QAAAA,MAAM,EAAE,YAAV;AAAwBC,QAAAA,MAAM,EAAE;AAAhC,OAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANA,EAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,UAAD;AAAY,MAAA,IAAI,EAAC,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE,MAAC,UAAD;AAAY,MAAA,IAAI,EAAC,cAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAGE,MAAC,UAAD;AAAY,MAAA,IAAI,EAAC,eAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,CAPA,EAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACCjB,KAAK,CAACY,KAAN,CAAYC,GAAZ,CAAgBC,MAAM,IACrB;AAAI,MAAA,GAAG,EAAEA,MAAM,CAACC,EAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,IAAD;AAAM,MAAA,IAAI,EAAC,gBAAX;AAA4B,MAAA,EAAE,EAAG,WAAUD,MAAM,CAACrB,IAAK,EAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAIqB,MAAM,CAACrB,IAAX,CADF,CADF,CADD,CADD,CAZA,EAqBD;AAAK,MAAA,KAAK,EAAE;AAAEiB,QAAAA,MAAM,EAAE,IAAV;AAAgBC,QAAAA,KAAK,EAAE;AAAvB,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA4C,KAAKO,KAAL,CAAWd,QAAX,IAAuB,MAAC,IAAD;AAAM,MAAA,IAAI,EAAEZ,UAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAnE,CArBC,CADF;AAyBA;;AAnCoC,C,CAsCxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;;;AAEAU,KAAK,CAACiB,eAAN,GAAwB,kBAAiB;AACvC,QAAMb,GAAG,GAAG,MAAMf,KAAK,CAAC,8CAAD,CAAvB;AACA,QAAM6B,IAAI,GAAG,MAAMd,GAAG,CAACe,IAAJ,EAAnB;AAEA,MAAIC,MAAM,GAAG,MAAM,OAAO,eAAP,CAAnB;AACArB,EAAAA,IAAI,GAAGqB,MAAM,CAACrB,IAAd;AAEAsB,EAAAA,OAAO,CAACC,GAAR,CAAa,6BAA4BJ,IAAI,CAACK,MAAO,EAArD;AAEA,SAAO;AACLzB,IAAAA,KAAK,EAAE,EADF;AAELY,IAAAA,KAAK,EAAEQ,IAAI,CAACP,GAAL,CAASa,KAAK,IAAIA,KAAK,CAACC,IAAxB,CAFF;AAGLC,IAAAA,UAAU,EAAE;AAHP,GAAP;AAKD,CAdD;;AAgBA,eAAe1B,KAAf","sourcesContent":["import React from 'react';\nimport Link from 'next/link';\nimport {ForceGraph, ForceGraphNode, ForceGraphLink} from 'react-vis-force';\nimport fetch from 'isomorphic-unfetch';\n//import Tree from 'react-d3-tree';\n//const Tree = require('react-d3-tree').Tree;\n\nconst myTreeData = [\n  {\n    name: 'Top Level',\n    attributes: {\n      keyA: 'val A',\n      keyB: 'val B',\n      keyC: 'val C',\n    },\n    children: [\n      {\n        name: 'Level 2: A',\n        attributes: {\n          keyA: 'val A',\n          keyB: 'val B',\n          keyC: 'val C',\n        },\n      },\n      {\n        name: 'Level 2: B',\n      },\n    ],\n  },\n];\n\nconst PersonLink = props => (\n  <li>\n    <Link href=\"/person/[name]\" as={`/person/${props.name}`}>\n      <a>{props.name}</a>\n    </Link>\n  </li>\n);\n\n\nlet Tree = ' '\nclass Index extends React.PureComponent {\n   state = {\n   \tredender: false\n   };\n   async componentDidMount() {\n   \tlet res = await import(\"react-d3-tree\");\n   \tTree = res.Tree;\n   \tthis.setState({ redender: true, window });\n   }\n   render() {\n   \treturn (\n      <div>\n      <ForceGraph simulationOptions={{ height: 300, width: 300 }}>\n        {props.shows.map(person => (\n          <ForceGraphNode node={{ id: person.id, name: person.name }} fill=\"red\" />\n        ))}\n      </ForceGraph>\n      <ForceGraphLink link={{ source: 'first-node', target: 'second-node' }} />\n      <ul>\n        <PersonLink name=\"Lev Parnas\" />\n        <PersonLink name=\"Donald Trump\" />\n        <PersonLink name=\"Jared Kushner\" />\n      </ul>\n      <ul>\n      {props.shows.map(person => (\n        <li key={person.id}>\n          <Link href=\"/person/[name]\" as={`/person/${person.name}`}>\n            <a>{person.name}</a>\n          </Link>\n        </li>\n      ))}\n    </ul>\n     <div style={{ height: 1000, width: 1000 }}>{this.state.redender && <Tree data={myTreeData} />}</div>\n     </div>\n     );\n   }\n}\n\n// const Index = props => {\n//   const Tree = require('react-d3-tree').Tree;\n//   return (\n//     <div>\n//       <ForceGraph simulationOptions={{ height: 300, width: 300 }}>\n//         {props.shows.map(person => (\n//           <ForceGraphNode node={{ id: person.id, name: person.name }} fill=\"red\" />\n//         ))}\n//       </ForceGraph>\n//       <ForceGraphLink link={{ source: 'first-node', target: 'second-node' }} />\n//       <ul>\n//         <PersonLink name=\"Lev Parnas\" />\n//         <PersonLink name=\"Donald Trump\" />\n//         <PersonLink name=\"Jared Kushner\" />\n//       </ul>\n//       <ul>\n//       {props.shows.map(person => (\n//         <li key={person.id}>\n//           <Link href=\"/person/[name]\" as={`/person/${person.name}`}>\n//             <a>{person.name}</a>\n//           </Link>\n//         </li>\n//       ))}\n//     </ul>\n//     <div id=\"treeWrapper\" style={{width: '50em', height: '20em'}}>\n \n//     <Tree data={myTreeData} onClick={this.onClick} />\n  \n// </div>    </div>\n// )};\n  \nIndex.getInitialProps = async function() {\n  const res = await fetch('https://api.tvmaze.com/search/shows?q=batman');\n  const data = await res.json();\n\n  let d3Tree = await import(\"react-d3-tree\");\n  Tree = d3Tree.Tree;\n\n  console.log(`Show data fetched. Count: ${data.length}`);\n\n  return {\n    props: [],\n    shows: data.map(entry => entry.show),\n    renderTree: true,\n  };\n};\n\nexport default Index;"]},"metadata":{},"sourceType":"module"}