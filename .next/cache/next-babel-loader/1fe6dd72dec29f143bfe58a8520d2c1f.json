{"ast":null,"code":"var _jsxFileName = \"/var/www/html/rel-viz/pages/index.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport Link from 'next/link';\nimport { ForceGraph, ForceGraphNode, ForceGraphLink } from 'react-vis-force';\nimport fetch from 'isomorphic-unfetch';\nimport * as d3 from \"d3\";\nvar width = 960;\nvar height = 500;\nvar force = d3.forceSimulation(); // *****************************************************\n// ** d3 functions to manipulate attributes\n// *****************************************************\n\nvar enterNode = selection => {\n  selection.classed('node', true);\n  selection.append('circle').attr(\"r\", d => d.size).call(initforce.drag);\n  selection.append('text').attr(\"x\", d => d.size + 5).attr(\"dy\", \".35em\").text(d => d.key);\n};\n\nvar updateNode = selection => {\n  selection.attr(\"transform\", d => \"translate(\" + d.x + \",\" + d.y + \")\");\n};\n\nvar enterLink = selection => {\n  selection.classed('link', true).attr(\"stroke-width\", d => d.size);\n};\n\nvar updateLink = selection => {\n  selection.attr(\"x1\", d => d.source.x).attr(\"y1\", d => d.source.y).attr(\"x2\", d => d.target.x).attr(\"y2\", d => d.target.y);\n};\n\nvar updateGraph = selection => {\n  selection.selectAll('.node').call(updateNode);\n  selection.selectAll('.link').call(updateLink);\n};\n\nconst PersonLink = props => __jsx(\"li\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 53\n  },\n  __self: this\n}, __jsx(Link, {\n  href: \"/person/[name]\",\n  as: `/person/${props.name}`,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 54\n  },\n  __self: this\n}, __jsx(\"a\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 55\n  },\n  __self: this\n}, props.name)));\n\nconst Index = props => __jsx(\"div\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 61\n  },\n  __self: this\n}, __jsx(ForceGraph, {\n  simulationOptions: {\n    height: 300,\n    width: 300\n  },\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 62\n  },\n  __self: this\n}, props.shows.map(person => __jsx(ForceGraphNode, {\n  node: {\n    id: person.id,\n    name: person.name\n  },\n  fill: \"red\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 64\n  },\n  __self: this\n}))), __jsx(ForceGraphLink, {\n  link: {\n    source: 'first-node',\n    target: 'second-node'\n  },\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 67\n  },\n  __self: this\n}), __jsx(\"ul\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 68\n  },\n  __self: this\n}, __jsx(PersonLink, {\n  name: \"Lev Parnas\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 69\n  },\n  __self: this\n}), __jsx(PersonLink, {\n  name: \"Donald Trump\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 70\n  },\n  __self: this\n}), __jsx(PersonLink, {\n  name: \"Jared Kushner\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 71\n  },\n  __self: this\n})), __jsx(\"ul\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 73\n  },\n  __self: this\n}, props.shows.map(person => __jsx(\"li\", {\n  key: person.id,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 75\n  },\n  __self: this\n}, __jsx(Link, {\n  href: \"/person/[name]\",\n  as: `/person/${person.name}`,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 76\n  },\n  __self: this\n}, __jsx(\"a\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 77\n  },\n  __self: this\n}, person.name))))));\n\nIndex.getInitialProps = async function () {\n  const res = await fetch('https://api.tvmaze.com/search/shows?q=batman');\n  const data = await res.json();\n  console.log(`Show data fetched. Count: ${data.length}`);\n  return {\n    shows: data.map(entry => entry.show)\n  };\n};\n\nexport default Index;","map":{"version":3,"sources":["/var/www/html/rel-viz/pages/index.js"],"names":["React","Link","ForceGraph","ForceGraphNode","ForceGraphLink","fetch","d3","width","height","force","forceSimulation","enterNode","selection","classed","append","attr","d","size","call","initforce","drag","text","key","updateNode","x","y","enterLink","updateLink","source","target","updateGraph","selectAll","PersonLink","props","name","Index","shows","map","person","id","getInitialProps","res","data","json","console","log","length","entry","show"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Link from 'next/link';\nimport {ForceGraph, ForceGraphNode, ForceGraphLink} from 'react-vis-force';\nimport fetch from 'isomorphic-unfetch';\nimport * as d3 from \"d3\";\n\nvar width = 960;\nvar height = 500;\nvar force = d3.forceSimulation();\n\n// *****************************************************\n// ** d3 functions to manipulate attributes\n// *****************************************************\n\nvar enterNode = (selection) => {\n  selection.classed('node', true);\n\n  selection.append('circle')\n    .attr(\"r\", (d) => d.size)\n    .call(initforce.drag);\n\n  selection.append('text')\n    .attr(\"x\", (d) => d.size + 5)\n    .attr(\"dy\", \".35em\")\n    .text((d) => d.key);\n};\n\nvar updateNode = (selection) => {\n  selection.attr(\"transform\", (d) => \"translate(\" + d.x + \",\" + d.y + \")\");\n};\n\nvar enterLink = (selection) => {\n  selection.classed('link', true)\n    .attr(\"stroke-width\", (d) => d.size);\n};\n\nvar updateLink = (selection) => {\n  selection.attr(\"x1\", (d) => d.source.x)\n    .attr(\"y1\", (d) => d.source.y)\n    .attr(\"x2\", (d) => d.target.x)\n    .attr(\"y2\", (d) => d.target.y);\n};\n\nvar updateGraph = (selection) => {\n  selection.selectAll('.node')\n    .call(updateNode);\n  selection.selectAll('.link')\n    .call(updateLink);\n};\n\n\nconst PersonLink = props => (\n  <li>\n    <Link href=\"/person/[name]\" as={`/person/${props.name}`}>\n      <a>{props.name}</a>\n    </Link>\n  </li>\n);\n\nconst Index = props => (\n    <div>\n      <ForceGraph simulationOptions={{ height: 300, width: 300 }}>\n        {props.shows.map(person => (\n          <ForceGraphNode node={{ id: person.id, name: person.name }} fill=\"red\" />\n        ))}\n      </ForceGraph>\n      <ForceGraphLink link={{ source: 'first-node', target: 'second-node' }} />\n      <ul>\n        <PersonLink name=\"Lev Parnas\" />\n        <PersonLink name=\"Donald Trump\" />\n        <PersonLink name=\"Jared Kushner\" />\n      </ul>\n      <ul>\n      {props.shows.map(person => (\n        <li key={person.id}>\n          <Link href=\"/person/[name]\" as={`/person/${person.name}`}>\n            <a>{person.name}</a>\n          </Link>\n        </li>\n      ))}\n    </ul>\n\n    </div>\n);\n  \nIndex.getInitialProps = async function() {\n  const res = await fetch('https://api.tvmaze.com/search/shows?q=batman');\n  const data = await res.json();\n\n  console.log(`Show data fetched. Count: ${data.length}`);\n\n  return {\n    shows: data.map(entry => entry.show)\n  };\n};\n\nexport default Index;"]},"metadata":{},"sourceType":"module"}