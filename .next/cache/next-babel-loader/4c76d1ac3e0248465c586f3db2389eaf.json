{"ast":null,"code":"var _jsxFileName = \"/var/www/html/rel-viz/pages/index.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport Link from 'next/link';\nimport { ForceGraph, ForceGraphNode, ForceGraphLink } from 'react-vis-force';\nimport fetch from 'isomorphic-unfetch';\nimport people from '../data/people.json';\nconsole.log(people);\nconst myTreeData = [{\n  name: 'Top Level',\n  attributes: {\n    keyA: 'val A',\n    keyB: 'val B',\n    keyC: 'val C'\n  },\n  children: [{\n    name: 'Level 2: A',\n    attributes: {\n      keyA: 'val A',\n      keyB: 'val B',\n      keyC: 'val C'\n    }\n  }, {\n    name: 'Level 2: B'\n  }]\n}];\n\nconst PersonLink = props => __jsx(\"li\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 34\n  },\n  __self: this\n}, __jsx(Link, {\n  href: \"/person/[name]\",\n  as: `/person/${props.name}`,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 35\n  },\n  __self: this\n}, __jsx(\"a\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 36\n  },\n  __self: this\n}, props.name)));\n\nconst Index = props => {\n  console.log(props);\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, __jsx(ForceGraph, {\n    simulationOptions: {\n      height: 300,\n      width: 300\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, props.nodes.map(person => __jsx(ForceGraphNode, {\n    node: {\n      id: person.id,\n      name: person.name\n    },\n    fill: \"red\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }))), __jsx(ForceGraphLink, {\n    link: {\n      source: 'first-node',\n      target: 'second-node'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }), __jsx(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, __jsx(PersonLink, {\n    name: \"Lev Parnas\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }), __jsx(PersonLink, {\n    name: \"Donald Trump\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }), __jsx(PersonLink, {\n    name: \"Jared Kushner\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  })), __jsx(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, props.shows.map(person => __jsx(\"li\", {\n    key: person.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, __jsx(Link, {\n    href: \"/person/[name]\",\n    as: `/person/${person.name}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, __jsx(\"a\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, person.name))))));\n};\n\nIndex.getInitialProps = async function () {\n  //  const res = await fetch('../data/people.json');\n  //  const data = people.json();\n  //  console.log(`Show data fetched. Count: ${data.length}`);\n  //console.log(data.map(entry => entry.show));\n  console.log(people);\n  return {\n    props: [],\n    nodes: people,\n    renderTree: true\n  };\n};\n\nexport default Index;","map":{"version":3,"sources":["/var/www/html/rel-viz/pages/index.js"],"names":["React","Link","ForceGraph","ForceGraphNode","ForceGraphLink","fetch","people","console","log","myTreeData","name","attributes","keyA","keyB","keyC","children","PersonLink","props","Index","height","width","nodes","map","person","id","source","target","shows","getInitialProps","renderTree"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Link from 'next/link';\nimport {ForceGraph, ForceGraphNode, ForceGraphLink} from 'react-vis-force';\nimport fetch from 'isomorphic-unfetch';\nimport people from '../data/people.json';\n\nconsole.log(people);\n\nconst myTreeData = [\n  {\n    name: 'Top Level',\n    attributes: {\n      keyA: 'val A',\n      keyB: 'val B',\n      keyC: 'val C',\n    },\n    children: [\n      {\n        name: 'Level 2: A',\n        attributes: {\n          keyA: 'val A',\n          keyB: 'val B',\n          keyC: 'val C',\n        },\n      },\n      {\n        name: 'Level 2: B',\n      },\n    ],\n  },\n];\n\nconst PersonLink = props => (\n  <li>\n    <Link href=\"/person/[name]\" as={`/person/${props.name}`}>\n      <a>{props.name}</a>\n    </Link>\n  </li>\n);\n\nconst Index = props => {\nconsole.log(props);\n  return (\n    <div>\n      <ForceGraph simulationOptions={{ height: 300, width: 300 }}>\n        {props.nodes.map(person => (\n          <ForceGraphNode node={{ id: person.id, name: person.name }} fill=\"red\" />\n        ))}\n      </ForceGraph>\n      <ForceGraphLink link={{ source: 'first-node', target: 'second-node' }} />\n      <ul>\n        <PersonLink name=\"Lev Parnas\" />\n        <PersonLink name=\"Donald Trump\" />\n        <PersonLink name=\"Jared Kushner\" />\n      </ul>\n      <ul>\n      {props.shows.map(person => (\n        <li key={person.id}>\n          <Link href=\"/person/[name]\" as={`/person/${person.name}`}>\n            <a>{person.name}</a>\n          </Link>\n        </li>\n      ))}\n    </ul>\n</div>\n)};\n  \nIndex.getInitialProps = async function() {\n//  const res = await fetch('../data/people.json');\n//  const data = people.json();\n\n//  console.log(`Show data fetched. Count: ${data.length}`);\n\n  //console.log(data.map(entry => entry.show));\nconsole.log(people);\n  return {\n    props: [],\n    nodes: people,\n    renderTree: true,\n  };\n};\n\nexport default Index;"]},"metadata":{},"sourceType":"module"}