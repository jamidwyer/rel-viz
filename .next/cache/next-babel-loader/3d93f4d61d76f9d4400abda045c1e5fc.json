{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nvar _jsxFileName = \"/var/www/html/rel-viz/pages/index.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport Link from 'next/link';\nimport { ForceGraph, ForceGraphNode, ForceGraphLink } from 'react-vis-force';\nimport fetch from 'isomorphic-unfetch';\n\nvar PersonLink = function PersonLink(props) {\n  return __jsx(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7\n    },\n    __self: this\n  }, __jsx(Link, {\n    href: \"/person/[name]\",\n    as: \"/person/\".concat(props.name),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8\n    },\n    __self: this\n  }, __jsx(\"a\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  }, props.name)));\n};\n\nvar Index = function Index(props) {\n  console.log(props);\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, __jsx(ForceGraph, {\n    simulationOptions: {\n      height: 300,\n      width: 300\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, props.shows.map(function (person) {\n    return __jsx(ForceGraphNode, {\n      node: {\n        id: person.id,\n        name: person.name\n      },\n      fill: \"red\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    });\n  })), props.shows.map(function (person) {\n    person.links.map(function (link) {\n      return __jsx(ForceGraphLink, {\n        link: {\n          source: person.name,\n          target: link\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      });\n    });\n  }), __jsx(ForceGraphLink, {\n    link: {\n      source: 'first-node',\n      target: 'second-node'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }), __jsx(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, __jsx(PersonLink, {\n    name: \"Lev Parnas\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }), __jsx(PersonLink, {\n    name: \"Donald Trump\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }), __jsx(PersonLink, {\n    name: \"Jared Kushner\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  })), __jsx(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, props.shows.map(function (person) {\n    return __jsx(\"li\", {\n      key: person.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, __jsx(Link, {\n      href: \"/person/[name]\",\n      as: \"/person/\".concat(person.name),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, __jsx(\"a\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, person.name)));\n  })));\n};\n\nIndex.getInitialProps = function _callee() {\n  var res, data;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(fetch('https://api.tvmaze.com/search/shows?q=batman'));\n\n        case 2:\n          res = _context.sent;\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(res.json());\n\n        case 5:\n          data = _context.sent;\n          console.log(\"Show data fetched. Count: \".concat(data.length));\n          console.log(data.map(function (entry) {\n            return entry.show;\n          }));\n          return _context.abrupt(\"return\", {\n            props: [],\n            shows: data.map(function (entry) {\n              return entry.show;\n            }),\n            renderTree: true\n          });\n\n        case 9:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nexport default Index;","map":{"version":3,"sources":["/var/www/html/rel-viz/pages/index.js"],"names":["React","Link","ForceGraph","ForceGraphNode","ForceGraphLink","fetch","PersonLink","props","name","Index","console","log","height","width","shows","map","person","id","links","link","source","target","getInitialProps","res","json","data","length","entry","show","renderTree"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Link from 'next/link';\nimport {ForceGraph, ForceGraphNode, ForceGraphLink} from 'react-vis-force';\nimport fetch from 'isomorphic-unfetch';\n\nconst PersonLink = props => (\n  <li>\n    <Link href=\"/person/[name]\" as={`/person/${props.name}`}>\n      <a>{props.name}</a>\n    </Link>\n  </li>\n);\n\nconst Index = props => {\nconsole.log(props);\n  return (\n    <div>\n      <ForceGraph simulationOptions={{ height: 300, width: 300 }}>\n        {props.shows.map(person => (\n          <ForceGraphNode node={{ id: person.id, name: person.name }} fill=\"red\" />\n        ))}\n      </ForceGraph>\n      {props.shows.map(person => {\n        person.links.map(link => \n          (\n            <ForceGraphLink link={{ source: person.name, target: link }} />\n          )\n          )\n      }\n      )}\n      <ForceGraphLink link={{ source: 'first-node', target: 'second-node' }} />\n      <ul>\n        <PersonLink name=\"Lev Parnas\" />\n        <PersonLink name=\"Donald Trump\" />\n        <PersonLink name=\"Jared Kushner\" />\n      </ul>\n      <ul>\n      {props.shows.map(person => (\n        <li key={person.id}>\n          <Link href=\"/person/[name]\" as={`/person/${person.name}`}>\n            <a>{person.name}</a>\n          </Link>\n        </li>\n      ))}\n    </ul>\n</div>\n)};\n  \nIndex.getInitialProps = async function() {\n  const res = await fetch('https://api.tvmaze.com/search/shows?q=batman');\n  const data = await res.json();\n\n  console.log(`Show data fetched. Count: ${data.length}`);\n\n  console.log(data.map(entry => entry.show));\n\n  return {\n    props: [],\n    shows: data.map(entry => entry.show),\n    renderTree: true,\n  };\n};\n\nexport default Index;"]},"metadata":{},"sourceType":"module"}