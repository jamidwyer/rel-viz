{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\n\nvar _jsxFileName = \"/var/www/html/rel-viz/pages/index.js\",\n    _this2 = this;\n\nvar __jsx = React.createElement;\nimport React from 'react';\nimport Link from 'next/link';\nimport { ForceGraph, ForceGraphNode, ForceGraphLink } from 'react-vis-force';\nimport fetch from 'isomorphic-unfetch';\nimport * as d3 from \"d3\";\nvar width = 960;\nvar height = 500;\nvar force = d3.forceSimulation(); // *****************************************************\n// ** d3 functions to manipulate attributes\n// *****************************************************\n\nvar enterNode = function enterNode(selection) {\n  selection.classed('node', true);\n  selection.append('circle').attr(\"r\", function (d) {\n    return d.size;\n  }).call(initforce.drag);\n  selection.append('text').attr(\"x\", function (d) {\n    return d.size + 5;\n  }).attr(\"dy\", \".35em\").text(function (d) {\n    return d.key;\n  });\n};\n\nvar updateNode = function updateNode(selection) {\n  selection.attr(\"transform\", function (d) {\n    return \"translate(\" + d.x + \",\" + d.y + \")\";\n  });\n};\n\nvar enterLink = function enterLink(selection) {\n  selection.classed('link', true).attr(\"stroke-width\", function (d) {\n    return d.size;\n  });\n};\n\nvar updateLink = function updateLink(selection) {\n  selection.attr(\"x1\", function (d) {\n    return d.source.x;\n  }).attr(\"y1\", function (d) {\n    return d.source.y;\n  }).attr(\"x2\", function (d) {\n    return d.target.x;\n  }).attr(\"y2\", function (d) {\n    return d.target.y;\n  });\n};\n\nvar updateGraph = function updateGraph(selection) {\n  selection.selectAll('.node').call(updateNode);\n  selection.selectAll('.link').call(updateLink);\n}; // *****************************************************\n// ** Graph and App components\n// *****************************************************\n\n\nexport var Graph =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Graph, _React$Component);\n\n  function Graph() {\n    _classCallCheck(this, Graph);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Graph).apply(this, arguments));\n  }\n\n  _createClass(Graph, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this = this;\n\n      this.d3Graph = d3.select(ReactDOM.findDOMNode(this.refs.graph));\n      force.on('tick', function () {\n        // after force calculation starts, call updateGraph\n        // which uses d3 to manipulate the attributes,\n        // and React doesn't have to go through lifecycle on each tick\n        _this.d3Graph.call(updateGraph);\n      });\n    }\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps) {\n      this.d3Graph = d3.select(ReactDOM.findDOMNode(this.refs.graph));\n      var d3Nodes = this.d3Graph.selectAll('.node').data(nextProps.nodes, function (node) {\n        return node.key;\n      });\n      d3Nodes.enter().append('g').call(enterNode);\n      d3Nodes.exit().remove();\n      d3Nodes.call(updateNode);\n      var d3Links = this.d3Graph.selectAll('.link').data(nextProps.links, function (link) {\n        return link.key;\n      });\n      d3Links.enter().insert('line', '.node').call(enterLink);\n      d3Links.exit().remove();\n      d3Links.call(updateLink); // we should actually clone the nodes and links\n      // since we're not supposed to directly mutate\n      // props passed in from parent, and d3's force function\n      // mutates the nodes and links array directly\n      // we're bypassing that here for sake of brevity in example\n\n      force.nodes(nextProps.nodes).links(nextProps.links);\n      force.start();\n      return false;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(\"svg\", {\n        width: width,\n        height: height,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, __jsx(\"g\", {\n        ref: \"graph\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Graph;\n}(React.Component);\n;\n\nvar PersonLink = function PersonLink(props) {\n  return __jsx(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, __jsx(Link, {\n    href: \"/person/[name]\",\n    as: \"/person/\".concat(props.name),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, __jsx(\"a\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, props.name)));\n};\n\nvar Index = function Index(props) {\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, __jsx(ForceGraph, {\n    simulationOptions: {\n      height: 300,\n      width: 300\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, props.shows.map(function (person) {\n    return __jsx(ForceGraphNode, {\n      node: {\n        id: person.id,\n        name: person.name\n      },\n      fill: \"red\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    });\n  })), __jsx(ForceGraphLink, {\n    link: {\n      source: 'first-node',\n      target: 'second-node'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }), __jsx(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, __jsx(PersonLink, {\n    name: \"Lev Parnas\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }), __jsx(PersonLink, {\n    name: \"Donald Trump\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }), __jsx(PersonLink, {\n    name: \"Jared Kushner\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  })), __jsx(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }, props.shows.map(function (person) {\n    return __jsx(\"li\", {\n      key: person.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, __jsx(Link, {\n      href: \"/person/[name]\",\n      as: \"/person/\".concat(person.name),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, __jsx(\"a\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, person.name)));\n  })), __jsx(Graph, {\n    nodes: _this2.state.nodes,\n    links: _this2.state.links,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }));\n};\n\nIndex.getInitialProps = function _callee() {\n  var res, data;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(fetch('https://api.tvmaze.com/search/shows?q=batman'));\n\n        case 2:\n          res = _context.sent;\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(res.json());\n\n        case 5:\n          data = _context.sent;\n          console.log(\"Show data fetched. Count: \".concat(data.length));\n          return _context.abrupt(\"return\", {\n            shows: data.map(function (entry) {\n              return entry.show;\n            })\n          });\n\n        case 8:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nexport default Index;","map":{"version":3,"sources":["/var/www/html/rel-viz/pages/index.js"],"names":["React","Link","ForceGraph","ForceGraphNode","ForceGraphLink","fetch","d3","width","height","force","forceSimulation","enterNode","selection","classed","append","attr","d","size","call","initforce","drag","text","key","updateNode","x","y","enterLink","updateLink","source","target","updateGraph","selectAll","Graph","d3Graph","select","ReactDOM","findDOMNode","refs","graph","on","nextProps","d3Nodes","data","nodes","node","enter","exit","remove","d3Links","links","link","insert","start","Component","PersonLink","props","name","Index","shows","map","person","id","state","getInitialProps","res","json","console","log","length","entry","show"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Link from 'next/link';\nimport {ForceGraph, ForceGraphNode, ForceGraphLink} from 'react-vis-force';\nimport fetch from 'isomorphic-unfetch';\nimport * as d3 from \"d3\";\n\nvar width = 960;\nvar height = 500;\nvar force = d3.forceSimulation();\n\n// *****************************************************\n// ** d3 functions to manipulate attributes\n// *****************************************************\n\nvar enterNode = (selection) => {\n  selection.classed('node', true);\n\n  selection.append('circle')\n    .attr(\"r\", (d) => d.size)\n    .call(initforce.drag);\n\n  selection.append('text')\n    .attr(\"x\", (d) => d.size + 5)\n    .attr(\"dy\", \".35em\")\n    .text((d) => d.key);\n};\n\nvar updateNode = (selection) => {\n  selection.attr(\"transform\", (d) => \"translate(\" + d.x + \",\" + d.y + \")\");\n};\n\nvar enterLink = (selection) => {\n  selection.classed('link', true)\n    .attr(\"stroke-width\", (d) => d.size);\n};\n\nvar updateLink = (selection) => {\n  selection.attr(\"x1\", (d) => d.source.x)\n    .attr(\"y1\", (d) => d.source.y)\n    .attr(\"x2\", (d) => d.target.x)\n    .attr(\"y2\", (d) => d.target.y);\n};\n\nvar updateGraph = (selection) => {\n  selection.selectAll('.node')\n    .call(updateNode);\n  selection.selectAll('.link')\n    .call(updateLink);\n};\n\n// *****************************************************\n// ** Graph and App components\n// *****************************************************\n\nexport class Graph extends React.Component {\n  componentDidMount() {\n    this.d3Graph = d3.select(ReactDOM.findDOMNode(this.refs.graph));\n    force.on('tick', () => {\n      // after force calculation starts, call updateGraph\n      // which uses d3 to manipulate the attributes,\n      // and React doesn't have to go through lifecycle on each tick\n      this.d3Graph.call(updateGraph);\n    });\n  }\n\n  shouldComponentUpdate(nextProps) {\n    this.d3Graph = d3.select(ReactDOM.findDOMNode(this.refs.graph));\n\n    var d3Nodes = this.d3Graph.selectAll('.node')\n      .data(nextProps.nodes, (node) => node.key);\n    d3Nodes.enter().append('g').call(enterNode);\n    d3Nodes.exit().remove();\n    d3Nodes.call(updateNode);\n\n    var d3Links = this.d3Graph.selectAll('.link')\n      .data(nextProps.links, (link) => link.key);\n    d3Links.enter().insert('line', '.node').call(enterLink);\n    d3Links.exit().remove();\n    d3Links.call(updateLink);\n\n    // we should actually clone the nodes and links\n    // since we're not supposed to directly mutate\n    // props passed in from parent, and d3's force function\n    // mutates the nodes and links array directly\n    // we're bypassing that here for sake of brevity in example\n    force.nodes(nextProps.nodes).links(nextProps.links);\n    force.start();\n\n    return false;\n  }\n\n  render() {\n    return (\n      <svg width={width} height={height}>\n        <g ref='graph' />\n      </svg>\n    );\n  }\n};\n\nconst PersonLink = props => (\n  <li>\n    <Link href=\"/person/[name]\" as={`/person/${props.name}`}>\n      <a>{props.name}</a>\n    </Link>\n  </li>\n);\n\nconst Index = props => (\n    <div>\n      <ForceGraph simulationOptions={{ height: 300, width: 300 }}>\n        {props.shows.map(person => (\n          <ForceGraphNode node={{ id: person.id, name: person.name }} fill=\"red\" />\n        ))}\n      </ForceGraph>\n      <ForceGraphLink link={{ source: 'first-node', target: 'second-node' }} />\n      <ul>\n        <PersonLink name=\"Lev Parnas\" />\n        <PersonLink name=\"Donald Trump\" />\n        <PersonLink name=\"Jared Kushner\" />\n      </ul>\n      <ul>\n      {props.shows.map(person => (\n        <li key={person.id}>\n          <Link href=\"/person/[name]\" as={`/person/${person.name}`}>\n            <a>{person.name}</a>\n          </Link>\n        </li>\n      ))}\n    </ul>\n    <Graph nodes={this.state.nodes} links={this.state.links} />\n    </div>\n);\n  \nIndex.getInitialProps = async function() {\n  const res = await fetch('https://api.tvmaze.com/search/shows?q=batman');\n  const data = await res.json();\n\n  console.log(`Show data fetched. Count: ${data.length}`);\n\n  return {\n    shows: data.map(entry => entry.show)\n  };\n};\n\nexport default Index;"]},"metadata":{},"sourceType":"module"}