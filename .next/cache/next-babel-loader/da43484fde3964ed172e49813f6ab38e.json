{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nvar _jsxFileName = \"/var/www/html/rel-viz/components/force.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { scaleLinear } from 'd3-scale';\nimport preData from '../data/people.json';\nvar width = 960;\nvar height = 500; // coerce value to number\n\nvar data = preData.map(function (_ref) {\n  var name = _ref.name,\n      value = _ref.value;\n  return {\n    name: name,\n    value: +value\n  };\n});\nvar maxDatum = Math.max.apply(Math, _toConsumableArray(data.map(function (datum) {\n  return datum.value;\n})));\nvar y = scaleLinear().domain([0, maxDatum]).range([height, 0]);\nvar barWidth = width / data.length;\nexport default function BarChart() {\n  var bars = data.map(function (_ref2, i) {\n    var name = _ref2.name,\n        value = _ref2.value;\n    return __jsx(\"g\", {\n      transform: \"translate(\".concat(i * barWidth, \", 0)\"),\n      key: name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21\n      },\n      __self: this\n    }, __jsx(\"rect\", {\n      y: y(value),\n      height: height - y(value),\n      width: barWidth - 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    }), __jsx(\"text\", {\n      x: barWidth / 2,\n      y: y(value) + 3,\n      dy: \".75em\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }, value));\n  });\n  return __jsx(\"svg\", {\n    width: width,\n    height: height,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, bars);\n}","map":{"version":3,"sources":["/var/www/html/rel-viz/components/force.js"],"names":["React","scaleLinear","preData","width","height","data","map","name","value","maxDatum","Math","max","datum","y","domain","range","barWidth","length","BarChart","bars","i"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,WAAR,QAA0B,UAA1B;AACA,OAAOC,OAAP,MAAoB,qBAApB;AAEA,IAAMC,KAAK,GAAG,GAAd;AACA,IAAMC,MAAM,GAAG,GAAf,C,CAEA;;AACA,IAAMC,IAAI,GAAGH,OAAO,CAACI,GAAR,CAAY;AAAA,MAAEC,IAAF,QAAEA,IAAF;AAAA,MAAQC,KAAR,QAAQA,KAAR;AAAA,SAAoB;AAACD,IAAAA,IAAI,EAAJA,IAAD;AAAOC,IAAAA,KAAK,EAAE,CAACA;AAAf,GAApB;AAAA,CAAZ,CAAb;AAEA,IAAMC,QAAQ,GAAGC,IAAI,CAACC,GAAL,OAAAD,IAAI,qBAAQL,IAAI,CAACC,GAAL,CAAS,UAAAM,KAAK;AAAA,SAAIA,KAAK,CAACJ,KAAV;AAAA,CAAd,CAAR,EAArB;AAEA,IAAMK,CAAC,GAAGZ,WAAW,GAClBa,MADO,CACA,CAAC,CAAD,EAAIL,QAAJ,CADA,EAEPM,KAFO,CAED,CAACX,MAAD,EAAS,CAAT,CAFC,CAAV;AAIA,IAAMY,QAAQ,GAAGb,KAAK,GAAGE,IAAI,CAACY,MAA9B;AAEA,eAAe,SAASC,QAAT,GAAoB;AACjC,MAAMC,IAAI,GAAGd,IAAI,CAACC,GAAL,CAAS,iBAAgBc,CAAhB;AAAA,QAAEb,IAAF,SAAEA,IAAF;AAAA,QAAQC,KAAR,SAAQA,KAAR;AAAA,WACpB;AAAG,MAAA,SAAS,sBAAeY,CAAC,GAAGJ,QAAnB,SAAZ;AAA+C,MAAA,GAAG,EAAET,IAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAM,MAAA,CAAC,EAAEM,CAAC,CAACL,KAAD,CAAV;AAAmB,MAAA,MAAM,EAAEJ,MAAM,GAAGS,CAAC,CAACL,KAAD,CAArC;AAA8C,MAAA,KAAK,EAAEQ,QAAQ,GAAG,CAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE;AAAM,MAAA,CAAC,EAAEA,QAAQ,GAAG,CAApB;AAAuB,MAAA,CAAC,EAAEH,CAAC,CAACL,KAAD,CAAD,GAAW,CAArC;AAAwC,MAAA,EAAE,EAAC,OAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGA,KADH,CAFF,CADoB;AAAA,GAAT,CAAb;AASA,SACE;AAAK,IAAA,KAAK,EAAEL,KAAZ;AAAmB,IAAA,MAAM,EAAEC,MAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGe,IADH,CADF;AAKD","sourcesContent":["import React from 'react';\nimport {scaleLinear} from 'd3-scale';\nimport preData from '../data/people.json';\n\nconst width = 960;\nconst height = 500;\n\n// coerce value to number\nconst data = preData.map(({name, value}) => ({name, value: +value}));\n\nconst maxDatum = Math.max(...data.map(datum => datum.value));\n\nconst y = scaleLinear()\n  .domain([0, maxDatum])\n  .range([height, 0]);\n\nconst barWidth = width / data.length;\n\nexport default function BarChart() {\n  const bars = data.map(({name, value}, i) => (\n    <g transform={`translate(${i * barWidth}, 0)`} key={name}>\n      <rect y={y(value)} height={height - y(value)} width={barWidth - 1} />\n      <text x={barWidth / 2} y={y(value) + 3} dy=\".75em\">\n        {value}\n      </text>\n    </g>\n  ));\n\n  return (\n    <svg width={width} height={height}>\n      {bars}\n    </svg>\n  );\n}"]},"metadata":{},"sourceType":"module"}