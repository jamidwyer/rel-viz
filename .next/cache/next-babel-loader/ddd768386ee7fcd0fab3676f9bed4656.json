{"ast":null,"code":"var _jsxFileName = \"/var/www/html/rel-viz/pages/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nvar width = 960;\nvar height = 500;\nvar force = d3.layout.force().charge(-300).linkDistance(50).size([width, height]); // *****************************************************\n// ** d3 functions to manipulate attributes\n// *****************************************************\n\nvar enterNode = selection => {\n  selection.classed('node', true);\n  selection.append('circle').attr(\"r\", d => d.size).call(force.drag);\n  selection.append('text').attr(\"x\", d => d.size + 5).attr(\"dy\", \".35em\").text(d => d.key);\n};\n\nvar updateNode = selection => {\n  selection.attr(\"transform\", d => \"translate(\" + d.x + \",\" + d.y + \")\");\n};\n\nvar enterLink = selection => {\n  selection.classed('link', true).attr(\"stroke-width\", d => d.size);\n};\n\nvar updateLink = selection => {\n  selection.attr(\"x1\", d => d.source.x).attr(\"y1\", d => d.source.y).attr(\"x2\", d => d.target.x).attr(\"y2\", d => d.target.y);\n};\n\nvar updateGraph = selection => {\n  selection.selectAll('.node').call(updateNode);\n  selection.selectAll('.link').call(updateLink);\n}; // *****************************************************\n// ** Graph and App components\n// *****************************************************\n\n\nvar Graph = React.createClass({\n  displayName: \"Graph\",\n\n  componentDidMount() {\n    this.d3Graph = d3.select(ReactDOM.findDOMNode(this.refs.graph));\n    force.on('tick', () => {\n      // after force calculation starts, call updateGraph\n      // which uses d3 to manipulate the attributes,\n      // and React doesn't have to go through lifecycle on each tick\n      this.d3Graph.call(updateGraph);\n    });\n  },\n\n  shouldComponentUpdate(nextProps) {\n    this.d3Graph = d3.select(ReactDOM.findDOMNode(this.refs.graph));\n    var d3Nodes = this.d3Graph.selectAll('.node').data(nextProps.nodes, node => node.key);\n    d3Nodes.enter().append('g').call(enterNode);\n    d3Nodes.exit().remove();\n    d3Nodes.call(updateNode);\n    var d3Links = this.d3Graph.selectAll('.link').data(nextProps.links, link => link.key);\n    d3Links.enter().insert('line', '.node').call(enterLink);\n    d3Links.exit().remove();\n    d3Links.call(updateLink); // we should actually clone the nodes and links\n    // since we're not supposed to directly mutate\n    // props passed in from parent, and d3's force function\n    // mutates the nodes and links array directly\n    // we're bypassing that here for sake of brevity in example\n\n    force.nodes(nextProps.nodes).links(nextProps.links);\n    force.start();\n    return false;\n  },\n\n  render() {\n    return __jsx(\"svg\", {\n      width: width,\n      height: height,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, __jsx(\"g\", {\n      ref: \"graph\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }));\n  }\n\n});\n\nconst Index = () => __jsx(\"div\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 99\n  },\n  __self: this\n}, __jsx(\"p\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 100\n  },\n  __self: this\n}, \"Hello Next.js\"), __jsx(\"div\", {\n  className: \"update\",\n  onClick: this.updateData,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 101\n  },\n  __self: this\n}, \"update\"), __jsx(Graph, {\n  nodes: this.state.nodes,\n  links: this.state.links,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 102\n  },\n  __self: this\n}));\n\nexport default Index;","map":{"version":3,"sources":["/var/www/html/rel-viz/pages/index.js"],"names":["width","height","force","d3","layout","charge","linkDistance","size","enterNode","selection","classed","append","attr","d","call","drag","text","key","updateNode","x","y","enterLink","updateLink","source","target","updateGraph","selectAll","Graph","React","createClass","componentDidMount","d3Graph","select","ReactDOM","findDOMNode","refs","graph","on","shouldComponentUpdate","nextProps","d3Nodes","data","nodes","node","enter","exit","remove","d3Links","links","link","insert","start","render","Index","updateData","state"],"mappings":"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","sourcesContent":["var width = 960;\nvar height = 500;\nvar force = d3.layout.force()\n  .charge(-300)\n  .linkDistance(50)\n  .size([width, height]);\n\n// *****************************************************\n// ** d3 functions to manipulate attributes\n// *****************************************************\n\nvar enterNode = (selection) => {\n  selection.classed('node', true);\n\n  selection.append('circle')\n    .attr(\"r\", (d) => d.size)\n    .call(force.drag);\n\n  selection.append('text')\n    .attr(\"x\", (d) => d.size + 5)\n    .attr(\"dy\", \".35em\")\n    .text((d) => d.key);\n};\n\nvar updateNode = (selection) => {\n  selection.attr(\"transform\", (d) => \"translate(\" + d.x + \",\" + d.y + \")\");\n};\n\nvar enterLink = (selection) => {\n  selection.classed('link', true)\n    .attr(\"stroke-width\", (d) => d.size);\n};\n\nvar updateLink = (selection) => {\n  selection.attr(\"x1\", (d) => d.source.x)\n    .attr(\"y1\", (d) => d.source.y)\n    .attr(\"x2\", (d) => d.target.x)\n    .attr(\"y2\", (d) => d.target.y);\n};\n\nvar updateGraph = (selection) => {\n  selection.selectAll('.node')\n    .call(updateNode);\n  selection.selectAll('.link')\n    .call(updateLink);\n};\n\n// *****************************************************\n// ** Graph and App components\n// *****************************************************\n\nvar Graph = React.createClass({\n  componentDidMount() {\n    this.d3Graph = d3.select(ReactDOM.findDOMNode(this.refs.graph));\n    force.on('tick', () => {\n      // after force calculation starts, call updateGraph\n      // which uses d3 to manipulate the attributes,\n      // and React doesn't have to go through lifecycle on each tick\n      this.d3Graph.call(updateGraph);\n    });\n  },\n\n  shouldComponentUpdate(nextProps) {\n    this.d3Graph = d3.select(ReactDOM.findDOMNode(this.refs.graph));\n\n    var d3Nodes = this.d3Graph.selectAll('.node')\n      .data(nextProps.nodes, (node) => node.key);\n    d3Nodes.enter().append('g').call(enterNode);\n    d3Nodes.exit().remove();\n    d3Nodes.call(updateNode);\n\n    var d3Links = this.d3Graph.selectAll('.link')\n      .data(nextProps.links, (link) => link.key);\n    d3Links.enter().insert('line', '.node').call(enterLink);\n    d3Links.exit().remove();\n    d3Links.call(updateLink);\n\n    // we should actually clone the nodes and links\n    // since we're not supposed to directly mutate\n    // props passed in from parent, and d3's force function\n    // mutates the nodes and links array directly\n    // we're bypassing that here for sake of brevity in example\n    force.nodes(nextProps.nodes).links(nextProps.links);\n    force.start();\n\n    return false;\n  },\n\n  render() {\n    return (\n      <svg width={width} height={height}>\n        <g ref='graph' />\n      </svg>\n    );\n  }\n});\n\nconst Index = () => (\n    <div>\n        <p>Hello Next.js</p>\n        <div className=\"update\" onClick={this.updateData}>update</div>\n        <Graph nodes={this.state.nodes} links={this.state.links} />\n    </div>\n);\n  \nexport default Index;"]},"metadata":{},"sourceType":"module"}